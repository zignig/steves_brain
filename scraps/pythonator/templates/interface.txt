# generated from rust enum


from machine import Pin, SPI , SoftSPI
import time
import struct

{% macro parameters(arg) -%}
,{%- for val in arg.values -%}d{{loop.index}}{% if loop.last == false %},{% endif %}{%- endfor -%}
{%- endmacro %}

SYNC1 = 0xF
SYNC2 = 0xE
FRAME_SIZE = 8 

{% for item in items %}
FRAME_{{ item.name| upper  }} = {{ loop.index - 1 -}}
{% endfor %}

# create the controller device
class controller:
    def __init__(self,speed=10000):
        self.ss = Pin({{select_pin}},Pin.OUT)
        self.interval = {{interval}}
        self.ss.on()
        self.port = SoftSPI(baudrate=speed,sck=Pin({{sck}}),mosi=Pin({{mosi}}),miso=Pin({{miso}}))
        self._frame = bytearray([0]*FRAME_SIZE)
        self._return_frame = bytearray([0]*FRAME_SIZE)
        self._data = bytearray([0,0,0,0])
        self._callbacks()

    def _build(self,action,data):
        self._frame = bytearray([SYNC1,SYNC2,0,action])
        self._frame = self._frame + bytes(data)
    
    def _send_to_port(self):
        self.ss.off()
        self.port.write(self._frame)
        self.ss.on()
        
    def _send(self,action,data):
        self._build(action,data)
        self._send_to_port()
        self._process()
    
    def _read(self):
        self.ss.off()
        data = self.port.read(8)
        self.ss.on()
        self._return_frame = data
        self._process()
    
    def _send(self,action,data):
        self._build(action,data)
        self._send_to_port()
        time.sleep_ms(self.interval)
        self._read()
    
    {% for item in items %}
    def {{ item.name|lower }}(self{%- call parameters(item) -%}):
        struct.pack_into('{{item.format_string}}',self._data,0{%- call parameters(item) -%})
        self._send(FRAME_{{item.name|upper}},self._data)
    {% endfor %}

    def _callbacks(self):
        self.names = [
    {%- for item in items -%}
        "{{ item.name| lower }}",
    {%- endfor -%}]
        self.functions = [
    {%- for item in items -%}
        None,
    {%- endfor -%}]
        self.data_format = [
    {%- for item in items -%}
        "{{item.format_string}}",
    {%- endfor -%}]

    def bind(self,name,func):
        for i in enumerate(self.names):
            if self.names[i[0]] == name:
                self.functions[i[0]] = func
    
    def _process(self):
        command = self._return_frame[3]
        data = self._return_frame[4:]
        if self.functions[command] != None:
            up = struct.unpack_from(self.data_format[command],data,0)
            self.functions[command](*up)