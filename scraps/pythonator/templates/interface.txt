# generated from rust enum

from machine import Pin, SPI
import time
import struct

SYNC1 = 0xF
SYNC2 = 0xE
FRAME_SIZE = 8 

{% for item in items %}
FRAME_{{ item.name| upper  }} = {{ loop.index - 1 -}}
{% endfor %}

class controller:
    def __init__(self,speed=5000):
        self.ss = Pin({{select_pin}},Pin.OUT)
        self.ss.on()
        self.port = SPI({{spi_interface}},speed)
        self._frame = bytes([0]*FRAME_SIZE)
        self._data = bytearray([0,0,0,0])

    def _build(self,action,data):
        self._frame = bytes([SYNC1,SYNC2,0,action])
        self._frame = self._frame + bytes(data)
    
    def _send(self):
        self.ss.off()
        self.port.write(self._frame)
        self.ss.on()
    
    def send(self,action,data):
        self._build(action,data)
        self._send()
    {% for item in items %}
    def {{ item.name|lower }}(self,{% for val in item.values%}d{{loop.index}}{% if loop.last == false %},{% endif %}{% endfor%}):
        struct.pack_into('{{item.format_string}}',self._data,0,{% for val in item.values%}d{{loop.index}}{% if loop.last == false %},{% endif %}{% endfor%})
        self.send(FRAME_{{item.name|upper}},self._data)
    {% endfor %}
